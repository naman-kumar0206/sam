#include <iostream>
#include <string>
#include <vector>
#include <fstream>
#include <boost/beast/core.hpp>
#include <boost/beast/http.hpp>
#include <boost/asio/connect.hpp>
#include <boost/asio/ip/tcp.hpp>
#include <nlohmann/json.hpp>
#include <libwebsockets.h>
#include <cstring>
#include <regex>

using json = nlohmann::json;
using tcp = boost::asio::ip::tcp;
namespace http = boost::beast::http;

std::string WS_URL_PATH = "";
static struct lws_context *context;
static struct lws *wsi_client = nullptr;
static std::string received_payload;
static int send_counter = 1;
static bool load_event_fired = false;
static bool html_received = false;
static std::string final_html;

std::string get_websocket_url_from_chrome() {
    boost::asio::io_context ioc;
    tcp::resolver resolver(ioc);
    boost::beast::tcp_stream stream(ioc);

    auto const results = resolver.resolve("localhost", "9222");
    stream.connect(results);

    http::request<http::string_body> req{http::verb::get, "/json", 11};
    req.set(http::field::host, "localhost");
    req.set(http::field::user_agent, BOOST_BEAST_VERSION_STRING);
    http::write(stream, req);

    boost::beast::flat_buffer buffer;
    http::response<http::string_body> res;
    http::read(stream, buffer, res);
    stream.socket().shutdown(tcp::socket::shutdown_both);

    json j = json::parse(res.body());
    return j[0]["webSocketDebuggerUrl"];
}

std::string build_command(int id, const std::string &method, const json &params = {}) {
    json j;
    j["id"] = id;
    j["method"] = method;
    if (!params.empty()) j["params"] = params;
    return j.dump();
}

void index_clickable_elements(const std::string &html) {
    std::regex clickable_re(R"(<(a|button|input)\b[^>]*>)", std::regex::icase);
    auto begin = std::sregex_iterator(html.begin(), html.end(), clickable_re);
    auto end = std::sregex_iterator();

    int index = 1;
    for (auto i = begin; i != end; ++i) {
        std::smatch match = *i;
        std::cout << "[" << index++ << "] " << match.str() << "\n";
    }
}

static int callback_cdp(struct lws *wsi, enum lws_callback_reasons reason,
                        void *user, void *in, size_t len) {
    static int stage = 0;

    switch (reason) {
        case LWS_CALLBACK_CLIENT_ESTABLISHED:
            std::cout << "✅ WebSocket connected.\n";
            lws_callback_on_writable(wsi);
            break;

        case LWS_CALLBACK_CLIENT_WRITEABLE: {
            std::string msg;
            if (stage == 0) {
                msg = build_command(send_counter++, "Page.enable");
            } else if (stage == 1) {
                msg = build_command(send_counter++, "Runtime.enable");
            } else if (stage == 2 && load_event_fired) {
                msg = build_command(send_counter++, "Runtime.evaluate",
                                    {{"expression", "document.documentElement.outerHTML"}});
            } else {
                return 0;
            }
            stage++;

            std::vector<unsigned char> buf(LWS_PRE + msg.size());
            std::memcpy(buf.data() + LWS_PRE, msg.c_str(), msg.size());
            lws_write(wsi, buf.data() + LWS_PRE, msg.size(), LWS_WRITE_TEXT);
            return 0;
        }

        case LWS_CALLBACK_CLIENT_RECEIVE: {
            std::string response((const char *)in, len);
            received_payload += response;

            try {
                auto j = json::parse(received_payload);

                if (j.contains("method") && j["method"] == "Page.loadEventFired") {
                    std::cout << "📥 Page load event received.\n";
                    load_event_fired = true;
                    lws_callback_on_writable(wsi);
                }

                if (j.contains("result") && j["result"].contains("result") &&
                    j["result"]["result"].contains("value")) {
                    final_html = j["result"]["result"]["value"];
                    std::ofstream file("output.html");
                    file << final_html;
                    file.close();
                    std::cout << "\n📄 Full HTML:\n" << final_html << "\n";
                    std::cout << "\n🔗 Clickable elements:\n";
                    index_clickable_elements(final_html);
                    html_received = true;
                    lws_cancel_service(context);
                }

                received_payload.clear();
            } catch (...) {
                // wait for more chunks
            }
            break;
        }

        case LWS_CALLBACK_CLIENT_CONNECTION_ERROR:
            std::cerr << "❌ Connection error.\n";
            html_received = true;
            break;

        case LWS_CALLBACK_CLOSED:
            std::cout << "🔒 WebSocket closed.\n";
            html_received = true;
            break;

        default:
            break;
    }
    return 0;
}

static struct lws_protocols protocols[] = {
    {
        "cdp-protocol",
        callback_cdp,
        0,
        65536,
    },
    { nullptr, nullptr, 0, 0 }
};

void run_websocket() {
    struct lws_context_creation_info info = {};
    info.port = CONTEXT_PORT_NO_LISTEN;
    info.protocols = protocols;

    context = lws_create_context(&info);
    if (!context) {
        std::cerr << "❌ Failed to create LWS context.\n";
        return;
    }

    struct lws_client_connect_info ccinfo = {};
    ccinfo.context = context;
    ccinfo.address = "localhost";
    ccinfo.port = 9222;
    ccinfo.path = WS_URL_PATH.c_str();
    ccinfo.host = lws_canonical_hostname(context);
    ccinfo.origin = "origin";
    ccinfo.protocol = protocols[0].name;
    ccinfo.ssl_connection = 0;

    wsi_client = lws_client_connect_via_info(&ccinfo);
    if (!wsi_client) {
        std::cerr << "❌ Failed to connect via WebSocket.\n";
        return;
    }

    while (!html_received) {
        lws_service(context, 100);
    }

    lws_context_destroy(context);
}

int main() {
    std::cout << "🔍 Fetching WebSocket URL...\n";
    std::string ws_url = get_websocket_url_from_chrome();
    if (ws_url.empty()) {
        std::cerr << "❌ Failed to get WebSocket URL.\n";
        return 1;
    }

    std::size_t path_start = ws_url.find("/devtools/");
    if (path_start == std::string::npos) {
        std::cerr << "❌ Invalid URL format.\n";
        return 1;
    }

    WS_URL_PATH = ws_url.substr(path_start);
    std::cout << "🔗 WebSocket Path: " << WS_URL_PATH << "\n";

    run_websocket();
    std::cout << "✅ Done.\n";
    return 0;
}
