#include <libwebsockets.h>
#include <string>
#include <iostream>
#include <cstring>

static int callback_cdp(struct lws* wsi, enum lws_callback_reasons reason,
                        void* user, void* in, size_t len)
{
    switch (reason) {
    case LWS_CALLBACK_CLIENT_ESTABLISHED:
        std::cout << "Connected to CDP server\n";
        break;

    case LWS_CALLBACK_CLIENT_RECEIVE:
        std::cout << "Received data:\n" << std::string((char*)in, len) << std::endl;
        break;

    case LWS_CALLBACK_CLIENT_WRITEABLE: {
        // Send a simple CDP message requesting the DOM
        std::string msg = R"({"id":1,"method":"DOM.getDocument"})";
        unsigned char buf[LWS_PRE + 512];
        std::memcpy(&buf[LWS_PRE], msg.c_str(), msg.length());
        lws_write(wsi, &buf[LWS_PRE], msg.length(), LWS_WRITE_TEXT);
        break;
    }

    case LWS_CALLBACK_CLOSED:
        std::cout << "Disconnected\n";
        break;

    default:
        break;
    }

    return 0;
}

static struct lws_protocols protocols[] = {
    {
        "cdp-protocol",    // protocol name
        callback_cdp,      // callback
        0,                 // per-session data size
        65536,             // max frame size
        0,                 // id (FIXED for v4.3.2+)
        nullptr,           // user (no user data)
        0                  // tx packet size
    },
    { nullptr, nullptr, 0, 0, 0, nullptr, 0 } // terminator
};


































struct lws_context_creation_info info;
std::memset(&info, 0, sizeof(info));
info.port = CONTEXT_PORT_NO_LISTEN;
info.protocols = protocols;
info.gid = -1;
info.uid = -1;

lws_context* context = lws_create_context(&info);
if (!context) {
    std::cerr << "Failed to create LWS context\n";
    return;
}

struct lws_client_connect_info i;
std::memset(&i, 0, sizeof(i));
i.context = context;
i.address = "localhost";     // CDP host
i.port = 9222;               // CDP port
i.path = "/devtools/browser/<REPLACE-WITH-TARGET-ID>"; // Replace with your browser target path
i.host = i.address;
i.origin = i.address;
i.protocol = protocols[0].name;
i.ssl_connection = 0;

if (!lws_client_connect_via_info(&i)) {
    std::cerr << "WebSocket connection failed\n";
    lws_context_destroy(context);
    return;
}

std::cout << "CDP WebSocket client started...\n";

while (lws_service(context, 1000) >= 0) {
    // Run event loop
}

lws_context_destroy(context);



